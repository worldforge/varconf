dnl Process this file with autoconf to generate configure

dnl Autoconf Initialization
AC_INIT()

dnl Information

VARCONF_MAJOR=0
VARCONF_MINOR=5
VARCONF_MICRO=5
VARCONF_VERSION=$VARCONF_MAJOR.$VARCONF_MINOR.$VARCONF_MICRO

AC_SUBST(VARCONF_MAJOR)
AC_SUBST(VARCONF_MINOR)
AC_SUBST(VARCONF_MICRO)
AC_SUBST(VARCONF_VERSION)

dnl versioning info for libtool
VARCONF_CURRENT=1
VARCONF_REVISION=0
VARCONF_AGE=0
VARCONF_VERSION_INFO="-version-info $VARCONF_CURRENT:$VARCONF_REVISION:$VARCONF_AGE"
VARCONF_VERSION_NO=$VARCONF_CURRENT.$VARCONF_AGE.$VARCONF_REVISION
VARCONF_USE_SUFFIX=0
VARCONF_SUFFIX=""
VARCONF_SCRIPT=""
VARCONF_MACRO=""
VARCONF_REQUIREREQUIRES=""

AC_SUBST(VARCONF_CURRENT)
AC_SUBST(VARCONF_VERSION_INFO)
AC_SUBST(VARCONF_VERSION_NO)

VARCONF_PACKAGE=varconf
MIN_SIGC_VERSION=1.0.4

dnl General Initialization
AC_SUBST(VARCONF_CURRENT)
AC_SUBST(VARCONF_REVISION)
AC_SUBST(VARCONF_AGE)
AC_SUBST(VARCONF_VERSION)
AC_SUBST(VARCONF_PACKAGE)
AC_SUBST(MIN_SIGC_VERSION)

AM_INIT_AUTOMAKE($VARCONF_PACKAGE,$VARCONF_VERSION)
AM_CONFIG_HEADER(config.h)

dnl Test for GNU libtool
AM_PROG_LIBTOOL

dnl Test for C++ Language

dnl Test for C++ Compiler
AC_PROG_CXX

AC_ARG_ENABLE(debug,
    [  --enable-debug          enable debug information [default=no]],
    [
        if test "$enableval" = "yes"; then
            CXXFLAGS="$CXXFLAGS -Wall -DDEBUG"
        else
            CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
        fi
    ],[
        CXXFLAGS="$CXXFLAGS -Wall -DNDEBUG"
    ]
)

dnl Test for ANSI standard language features

dnl Test for C++ bool keyword
AC_MSG_CHECKING([for C++ bool keyword])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_bool,
[
    AC_TRY_COMPILE(,
    [
        bool t = true, f = false;
    ],
    [
        ac_cv_feature_bool=yes
    ],
    [
        ac_cv_feature_bool=no
    ])
])

if test "$ac_cv_feature_bool" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ namespaces
AC_MSG_CHECKING([for C++ namespaces])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_namespaces,
[
    AC_TRY_COMPILE(
    [
        namespace foo { int i; }
        namespace bar { int i; }
        namespace baz { int i; }

        using namespace foo;
        using bar::i;
    ],
    [
        foo::i = 1;
        bar::i = 2;
        baz::i = 3;
    ],
    [
        ac_cv_feature_namespaces=yes
    ],
    [
        ac_cv_feature_namespaces=no
    ])
])

if test "$ac_cv_feature_namespaces" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ exception handling
AC_MSG_CHECKING([for C++ exception handling])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CACHE_VAL(ac_cv_feature_exceptions,
[
    AC_TRY_COMPILE(,
    [
			try
			{
			    throw 17;
			}
			catch (int i)
			{
			}
			catch (...)
			{
			}
		        ],
    [
        ac_cv_feature_exceptions=yes
    ],
    [
        ac_cv_feature_exceptions=no
    ])
])

if test "$ac_cv_feature_exceptions" = yes ; then
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi

AC_LANG_RESTORE

dnl Test for C++ Standard Library

dnl Test for <cstdio> header file
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(cstdio iostream list map string vector)

AC_LANG_RESTORE

dnl Test for libsigc++
AM_PATH_SIGC(1.0.3,[
        CPPFLAGS="$CPPFLAGS $SIGC_CFLAGS"
        LDFLAGS="$LDFLAGS $SIGC_LIBS"
        ],
        AC_MSG_ERROR([Couldn't find sigc++ library!])
)

SYSTEM_LIBS=
AC_SUBST(SYSTEM_LIBS)

VARCONF_LIBS=-lvarconf
AC_SUBST(VARCONF_LIBS)

VARCONF_CFLAGS=
AC_SUBST(VARCONF_CFLAGS)

dnl Generate files                         
AC_OUTPUT([
	Makefile
	varconf.spec
	doc/Makefile
	doc/old/Makefile
	tests/Makefile
	varconf/Makefile
	varconf-config
	varconf-0.5.pc
])
